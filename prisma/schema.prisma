generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
  PATIENT
  EMPLOYEE
}

// enum CivilStatus {
//   SINGLE
//   MARRIED
//   WIDOWED
//   SEPARATED
// }

model User {
  id                    String                 @id @default(cuid())
  username              String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(PATIENT)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  consent               Boolean
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt

  profile Profile?
}

model Profile {
  id String @id @default(nanoid(8))

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  employee Employee?
  patient  Patient?

  // Evaluation Evaluation[]
  // Vitals     Vitals[]
  // Chart   Chart?  @relation(fields: [chartId], references: [id])
  // chartId String?
}

// enum Gender {
//   MALE
//   FEMALE
//   PREFER_NOT_TO_SAY
// }

model Employee {
  id          String       @id @default(nanoid(8))
  fname       String
  mname       String
  lname       String
  gender      String
  // gender      Gender
  bdate       DateTime
  age         Int
  contactInfo ContactInfo?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique

  professionalInfo ProfessionInfo?

  clinicalDepartment   ClinicalDepartment? @relation(fields: [clinicalDepartmentId], references: [id])
  clinicalDepartmentId String?

  serviceDepartment   ServiceDepartment? @relation(fields: [serviceDepartmentId], references: [id])
  serviceDepartmentId String?
  Evaluation          Evaluation[]
  Vitals              Vitals[]
}

model Patient {
  id        String   @id @default(nanoid(8))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique

  fname         String
  mname         String
  lname         String
  nameSuffix    String?
  gender        String
  // gender        Gender
  age           Int
  bdate         DateTime
  bplace        String
  civilStatus   String
  // civilStatus   CivilStatus
  occupation    String?
  contactInfo   ContactInfo?
  allergies     Allergies[]
  prescriptions Presciption[]

  isSmoking             Boolean @default(false)
  isCovidVaccinated     Boolean @default(false)
  isDengvaxiaVaccinated Boolean @default(false)

  chart Chart?
}

model Chart {
  id        String   @id @default(nanoid(10))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String  @unique

  visits Visit[]
}

model Allergies {
  id        String   @id @default(uuid())
  name      String
  severity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId String  @unique
}

model Presciption {
  id Int @id @default(autoincrement())

  Patient   Patient? @relation(fields: [patientId], references: [id])
  patientId String?

  Visit   Visit?  @relation(fields: [visitId], references: [id])
  visitId String?
}

model ContactInfo {
  id      String    @id @default(uuid())
  address Address[]
  phone   String
  email   String

  employee    Employee? @relation(fields: [employeedId], references: [id])
  employeedId String?   @unique
  patient     Patient?  @relation(fields: [patientId], references: [id])
  patientId   String?   @unique
}

model Address {
  id          String   @id @default(uuid())
  houseNumber String
  street      String
  barangay    String
  city        String
  province    String
  region      String
  country     String
  zipCode     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contactInfo   ContactInfo? @relation(fields: [contactInfoId], references: [id], onDelete: Cascade)
  contactInfoId String?
}

enum Field {
  N_A
  CARDIOLOGY
  DENTISTRY
  PEDIACTRICS
}

model ProfessionInfo {
  id             String    @id @default(uuid())
  field          Field?    @default(N_A)
  licenseNumber  String?
  dateRegistered DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String?   @unique
}

model ClinicalDepartment {
  id          String  @id @default(nanoid(4))
  name        String  @unique
  head        String
  description String?

  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ServiceDepartment {
  id String @id @default(nanoid(4))

  name        String  @unique
  head        String
  description String?

  employees Employee[]
  visits    Visit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Visit {
  id             String   @id @default(nanoid(16))
  accompaniedBy  String?
  chiefComplaint String
  hpi            String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  chart               Chart?                @relation(fields: [chartId], references: [id], onDelete: Cascade)
  chartId             String?
  vitals              Vitals?
  physicalExamination PhysicalExamination[]
  evaluation          Evaluation?
  prescriptions       Presciption[]
  laboratoryRequest   LaboratoryRequest[]
  serviceDepartment   ServiceDepartment?    @relation(fields: [serviceDepartmentId], references: [id])
  serviceDepartmentId String?
}

model PhysicalExamination {
  id        String   @id @default(nanoid(16))
  category  String
  isNormal  Boolean
  remarks   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visit   Visit  @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId String @unique
}

model LaboratoryRequest {
  id         String    @id @default(uuid())
  clinicName String?
  result     String?   @db.Text
  date       DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // chart          Chart?         @relation(fields: [chartId], references: [id], onDelete: Cascade)
  // chartId        String?

  Visit   Visit?  @relation(fields: [visitId], references: [id])
  visitId String?

  laboratoryProcedure LaboratoryProcedures? @relation(fields: [labProcedureId], references: [id])
  labProcedureId      String?
  // requestingPhysician   User?                 @relation(fields: [requestingPhysicianId], references: [id])
  // requestingPhysicianId String?
}

model LaboratoryProcedures {
  id            String   @id @default(uuid())
  procedureName String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  laboratoryProcedureCategory LaboratoryProcedureCategory? @relation(fields: [labProcedureCategoryId], references: [id])
  labProcedureCategoryId      String?
  LaboratoryRequest           LaboratoryRequest[]
}

model LaboratoryProcedureCategory {
  id           String   @id @default(uuid())
  categoryName String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  laboratoryProcedures LaboratoryProcedures[]
}

model Evaluation {
  id        String   @id @default(nanoid(16))
  diagnosis String
  treatment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  physician   Employee? @relation(fields: [physicianId], references: [id])
  physicianId String?
  visit       Visit     @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId     String    @unique
}

model Vitals {
  id                       String   @id @default(nanoid(16))
  heightInCm               Int
  weightInKl               Int
  bloodPressure            String
  pulseRate                String
  respiratoryRate          String
  bodyTemperatureInCelsius Int
  oxygenSaturation         String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  nurse   Employee @relation(fields: [nurseId], references: [id])
  nurseId String

  visit   Visit  @relation(fields: [visitId], references: [id], onDelete: Cascade)
  visitId String @unique
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
